// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  // Premium subscription fields
  isPremium          Boolean   @default(false)
  premiumSince       DateTime?
  stripeCustomerId   String?   @map("stripe_customer_id")
  stripeSubscriptionId String? @map("stripe_subscription_id")

  // Restaurant owner specific fields
  restaurant   Restaurant?
  
  // Relationships
  accounts      Account[]
  sessions      Session[]
  orders        Order[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@index([token])
  @@index([expires])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@index([token])
  @@index([expires])
  @@map("password_reset_tokens")
}

model Restaurant {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String?
  phone       String?
  email       String?
  logo        String?
  coverImage  String?  @map("cover_image")
  isActive    Boolean  @default(false) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relationships
  ownerId String @unique
  owner   User   @relation(fields: [ownerId], references: [id])
  menus   Menu[]
  orders  Order[]
  bookings Booking[]  // ‚Üê ADD THIS MISSING LINE

  @@map("restaurants")
}

model Menu {
  id           String    @id @default(cuid())
  name         String
  description  String?
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  
  // Relationships
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  items        MenuItem[]

  @@map("menus")
}

model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  image       String?
  isAvailable Boolean  @default(true) @map("is_available")
  discount    Float?   @default(0)
  
  // Relationships
  menuId      String
  menu        Menu    @relation(fields: [menuId], references: [id])
  orderItems  OrderItem[]

  @@map("menu_items")
}

model Order {
  id          String        @id @default(cuid())
  totalAmount Float         @map("total_amount")
  status      OrderStatus   @default(PENDING)
  orderDate   DateTime      @default(now()) @map("order_date")
  pickupTime  DateTime      @map("pickup_time")
  
  // Relationships
  customerId  String
  customer    User          @relation(fields: [customerId], references: [id])
  restaurantId String
  restaurant  Restaurant    @relation(fields: [restaurantId], references: [id])
  items       OrderItem[]

  @@map("orders")
}

model OrderItem {
  id       String @id @default(cuid())
  quantity Int
  price    Float
  
  // Relationships
  orderId      String
  order        Order    @relation(fields: [orderId], references: [id])
  menuItemId   String
  menuItem     MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("order_items")
}

enum UserRole {
  CUSTOMER
  RESTAURANT_OWNER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  READY_FOR_PICKUP
  COMPLETED
  CANCELLED
}

model Customer {
  id            String   @id @default(cuid())
  fullName      String   @map("full_name")
  username      String   @unique
  email         String   @unique
  telephone     String
  emailVerified DateTime? @map("email_verified")
  password      String
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Relationships
  bookings Booking[]

  @@map("customers")
}

model Booking {
  id              String   @id @default(cuid())
  date            DateTime
  time            String
  partySize       Int      @map("party_size")
  childrenCount   Int      @default(0) @map("children_count")
  childrenAges    String?  @map("children_ages") // JSON string for ages array
  status          BookingStatus @default(PENDING)
  totalAmount     Float    @map("total_amount")
  discountAmount  Float    @map("discount_amount")
  finalAmount     Float    @map("final_amount")
  bookingDate     DateTime @default(now()) @map("booking_date")
  
  // Relationships
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  restaurantId String
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  @@map("bookings")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}